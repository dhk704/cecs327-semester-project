# -*- coding: utf-8 -*-
"""SLM Accuracy Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBVe64zXY8JDKNbyM9kanipnjxEArMCW
"""

# MMLU RESULTS GRAPH
# Import necessary libraries
import matplotlib.pyplot as plt
import numpy as np

# Organize by MMLU test categories
numshot = ("Overall", "Humanities", "Social Sciences", "STEM", "Other")
accuracy_means = {
    'gemma-7b-it-bnb-4bit': (49.46, 44.46, 57.04, 41.99, 57.10),
    'llama-3-8b-Instruct-bnb-4bit': (61.46, 55.66, 71.86, 52.01, 69.52),
}

# Graph sizing setup
x = np.arange(len(numshot))
width = 0.25
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in accuracy_means.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Graph labeling
ax.set_ylabel('Accuracy (%)')
ax.set_title('MMLU Benchmark (0-shot)')
ax.set_xticks(x + width, numshot)
ax.legend(loc='upper left', ncols=3)
ax.set_ylim(0, 100)

plt.show()

# GSM-8K RESULTS GRAPH (limited to 200 samples due to hardware limitations)
model = ['Gemma', 'Llama']
acc = [21.0, 69.5]

# Create a figure and axis object
fig, ax = plt.subplots(layout='constrained')

# Graph labeling
ax.bar(model[0], acc[0], width=0.2)
ax.bar(model[1], acc[1], width=0.2, color='#fc7c0c')  # Orange bar for Llama model

ax.set_title('GSM-8K Benchmark (5-shot)')
ax.set_xlabel('Model')
ax.set_ylabel('Accuracy (%)')

# ARC BENCHMARK GRAPHS

# Organize by amount of examples given to model before testing
numshot = ("0-shot", "5-shot", "10-shot")
accuracy_means = {
    'gemma-7b-it-bnb-4bit': (49.40, 50.00, 37.88),
    'llama-3-8b-Instruct-bnb-4bit': (54.86, 59.56, 59.98),
}

# Graph sizing setup
x = np.arange(len(numshot))
width = 0.25
multiplier = 0

fig, ax = plt.subplots(layout='constrained')

for attribute, measurement in accuracy_means.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Graph labeling
ax.set_ylabel('Accuracy (%)')
ax.set_title('ARC Benchmark Results')
ax.set_xticks(x + width, numshot)
ax.legend(loc='upper left', ncols=3)
ax.set_ylim(0, 100)

plt.show()